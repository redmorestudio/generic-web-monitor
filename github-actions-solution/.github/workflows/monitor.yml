name: AI Competitive Monitor

on:
  # Run every 6 hours
  schedule:
    - cron: '0 */6 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      analyze_only:
        description: 'Skip scraping and only run AI analysis'
        required: false
        default: false
        type: boolean

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Puppeteer browsers
        run: npx puppeteer browsers install chrome
      
      - name: Scrape competitor websites
        if: ${{ !inputs.analyze_only }}
        run: node scripts/scrape.js
        timeout-minutes: 30
      
      - name: Analyze with Claude AI
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: node scripts/analyze-with-ai.js
        timeout-minutes: 20
      
      - name: Generate dashboard data
        run: node scripts/generate-dashboard-data.js
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          git add docs/data.json
          git diff --staged --quiet || git commit -m "Update competitor intelligence data [skip ci]"
          git push
      
      - name: Send notification on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'AI Monitor Failed',
              body: `The AI competitive monitoring workflow failed. Check the [logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            })

  # Separate job for change detection
  detect-changes:
    needs: monitor
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Detect significant changes
        id: changes
        run: |
          node scripts/detect-changes.js
          echo "has_changes=$(cat .changes)" >> $GITHUB_OUTPUT
      
      - name: Create issue for high-priority changes
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('data/reports/latest.md', 'utf8');
            
            // Extract high priority items
            const highPriorityMatch = report.match(/### ðŸ”´ High Priority Findings[\s\S]*?(?=\n##|$)/);
            
            if (highPriorityMatch) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”´ High Priority Competitive Intelligence Alert',
                body: highPriorityMatch[0] + '\n\n[View full report](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/blob/main/data/reports/latest.md)',
                labels: ['competitive-intel', 'high-priority']
              });
            }

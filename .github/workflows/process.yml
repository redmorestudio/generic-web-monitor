name: 2. Process Content

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Run ID from scraping workflow'
        required: false
        type: string
      mode:
        description: 'Processing mode'
        required: false
        type: choice
        options:
          - 'latest'
          - 'all'
          - 'run'
        default: 'latest'
      use_three_db:
        description: 'Use three-database architecture'
        required: false
        type: boolean
        default: true
      cascade:
        description: 'Trigger subsequent workflows'
        required: false
        type: boolean
        default: true
  
  # Allow being called by other workflows
  workflow_call:
    inputs:
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Run ID from scraping workflow'
        required: false
        type: string
      cascade:
        description: 'Trigger subsequent workflows'
        required: false
        type: boolean
        default: false
    outputs:
      run_id:
        description: 'The workflow run ID'
        value: ${{ jobs.process-content.outputs.run_id }}

# Prevent concurrent runs
concurrency:
  group: process-workflow
  cancel-in-progress: false

env:
  NODE_ENV: production
  USE_THREE_DB: ${{ inputs.use_three_db || 'true' }}

jobs:
  process-content:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      run_id: ${{ github.run_id }}
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          cd github-actions-backend
          npm install --omit=dev
      
      # Download raw_content.db artifact from scrape workflow
      - name: Download raw content database
        if: ${{ inputs.trigger_source == 'scrape' && inputs.run_id }}
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: scraper-databases-${{ inputs.run_id }}
          path: github-actions-backend/data
        continue-on-error: true
      
      # Ensure all database files exist
      - name: Ensure latest database files
        run: |
          cd github-actions-backend
          echo "‚úÖ Checking database files..."
          
          # Check if artifact download was attempted but failed
          if [ "${{ inputs.trigger_source }}" = "scrape" ] && [ -n "${{ inputs.run_id }}" ] && [ "${{ steps.download-artifact.outcome }}" = "failure" ]; then
            echo "‚ö†Ô∏è  Artifact download failed for run_id: ${{ inputs.run_id }}"
            echo "üì• Attempting to use databases from repository..."
          fi
          
          # List current database files
          echo "üìÅ Current database files:"
          ls -la data/*.db 2>/dev/null || echo "No database files found yet"
          
          # If raw_content.db doesn't exist, try to get it from the repository
          if [ ! -f data/raw_content.db ]; then
            echo "üì• Pulling latest from repository to get databases..."
            git fetch origin main
            git checkout origin/main -- github-actions-backend/data/raw_content.db 2>/dev/null || true
            git checkout origin/main -- github-actions-backend/data/intelligence.db 2>/dev/null || true
            git checkout origin/main -- github-actions-backend/data/processed_content.db 2>/dev/null || true
          fi
          
          # Final check
          if [ ! -f data/raw_content.db ]; then
            echo "‚ùå ERROR: raw_content.db not found!"
            echo "üí° This workflow needs either:"
            echo "   1. To be triggered by the scrape workflow (automatic)"
            echo "   2. To have raw_content.db already in the repository"
            echo "   3. Run the scrape workflow first"
            exit 1
          else
            echo "‚úÖ Found raw_content.db"
            ls -lh data/*.db
          fi
      
      # NEW: Initialize three-database architecture if needed
      - name: Initialize Three-Database Architecture
        if: ${{ env.USE_THREE_DB == 'true' }}
        run: |
          cd github-actions-backend
          
          echo "üîß Ensuring three-database architecture exists..."
          
          # Run initialization script which creates databases if missing
          node scripts/init-db-three.js
      
      - name: Convert HTML to Markdown (three-db)
        if: ${{ env.USE_THREE_DB == 'true' }}
        run: |
          cd github-actions-backend
          
          echo "üìù Converting HTML to Markdown..."
          
          # Determine mode
          if [ "${{ inputs.mode }}" = "run" ] && [ -n "${{ inputs.run_id }}" ]; then
            node markdown-converter-three-db.js run ${{ inputs.run_id }}
          elif [ "${{ inputs.mode }}" = "all" ]; then
            node markdown-converter-three-db.js all
          else
            node markdown-converter-three-db.js latest
          fi
      
      - name: Convert HTML to Markdown (legacy)
        if: ${{ env.USE_THREE_DB != 'true' }}
        run: |
          cd github-actions-backend
          
          echo "üìù Converting HTML to Markdown (legacy mode)..."
          
          if [ "${{ inputs.mode }}" = "all" ]; then
            node markdown-converter.js all
          else
            node markdown-converter.js latest
          fi
      
      - name: Extract structured data
        run: |
          cd github-actions-backend
          
          echo "üîç Extracting structured data from content..."
          
          # TODO: Implement structured data extraction
          # This will parse markdown and extract:
          # - Pricing information
          # - Product features
          # - Company updates
          # - Technical specifications
      
      - name: Upload processed databases (three-db)
        if: ${{ env.USE_THREE_DB == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: processed-databases-${{ github.run_id }}
          path: |
            github-actions-backend/data/raw_content.db
            github-actions-backend/data/processed_content.db
            github-actions-backend/data/intelligence.db
          retention-days: 7
      
      - name: Upload processed database (legacy)
        if: ${{ env.USE_THREE_DB != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: processed-database-${{ github.run_id }}
          path: github-actions-backend/data/monitor.db
          retention-days: 7
      
      - name: Create process summary
        run: |
          cd github-actions-backend
          mkdir -p ../api-data
          echo "{
            \"workflow\": \"process\",
            \"run_id\": \"${{ github.run_id }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
            \"status\": \"completed\",
            \"mode\": \"${{ inputs.mode }}\",
            \"use_three_db\": ${{ env.USE_THREE_DB }}
          }" > ../api-data/last-process.json
      
      - name: Commit processed data (three-db)
        if: ${{ env.USE_THREE_DB == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Function to retry git push with exponential backoff
          push_with_retry() {
            local max_attempts=5
            local attempt=1
            local wait_time=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Attempt $attempt/$max_attempts to push changes..."
              
              # Try force-with-lease first
              if git push --force-with-lease origin main; then
                echo "‚úÖ Successfully pushed changes!"
                return 0
              fi
              
              echo "‚ùå Force-with-lease failed, pulling latest changes..."
              
              # Pull latest changes and try to rebase
              git fetch origin main
              git rebase origin/main || {
                echo "‚ùå Rebase failed, trying merge strategy..."
                git rebase --abort 2>/dev/null || true
                git merge origin/main --strategy=ours || {
                  echo "‚ùå Merge failed, will retry from fresh state"
                  return 1
                }
              }
              
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è≥ Waiting ${wait_time}s before retry..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              else
                echo "‚ùå All push attempts failed"
                return 1
              fi
            done
          }
          
          # Ensure we're on the latest version
          git fetch origin main
          git reset --hard origin/main
          
          # Add the databases if they exist
          if [ -f "github-actions-backend/data/processed_content.db" ]; then
            git add -f github-actions-backend/data/processed_content.db
            echo "‚úÖ Added processed_content.db to commit"
          else
            echo "‚ö†Ô∏è  processed_content.db not found, skipping"
          fi
          
          git add api-data/last-process.json || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üîÑ Update processed content (three-db) - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
            
            # Push with retry logic
            push_with_retry || {
              echo "‚ö†Ô∏è  Failed to push changes after multiple attempts"
              echo "‚ö†Ô∏è  Changes will be included in next workflow run"
              exit 0
            }
          fi
      
      - name: Commit processed data (legacy)
        if: ${{ env.USE_THREE_DB != 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Function to retry git push with exponential backoff
          push_with_retry() {
            local max_attempts=5
            local attempt=1
            local wait_time=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Attempt $attempt/$max_attempts to push changes..."
              
              # Try force-with-lease first
              if git push --force-with-lease origin main; then
                echo "‚úÖ Successfully pushed changes!"
                return 0
              fi
              
              echo "‚ùå Force-with-lease failed, pulling latest changes..."
              
              # Pull latest changes and try to rebase
              git fetch origin main
              git rebase origin/main || {
                echo "‚ùå Rebase failed, trying merge strategy..."
                git rebase --abort 2>/dev/null || true
                git merge origin/main --strategy=ours || {
                  echo "‚ùå Merge failed, will retry from fresh state"
                  return 1
                }
              }
              
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è≥ Waiting ${wait_time}s before retry..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              else
                echo "‚ùå All push attempts failed"
                return 1
              fi
            done
          }
          
          # Ensure we're on the latest version
          git fetch origin main
          git reset --hard origin/main
          
          # Add the database
          git add -f github-actions-backend/data/monitor.db || true
          git add api-data/last-process.json || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üîÑ Update processed content - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
            
            # Push with retry logic
            push_with_retry || {
              echo "‚ö†Ô∏è  Failed to push changes after multiple attempts"
              echo "‚ö†Ô∏è  Changes will be included in next workflow run"
              exit 0
            }
          fi
      
      # Trigger next workflow if cascade is enabled
      - name: Trigger analysis workflow
        if: success() && inputs.cascade
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AI_COMPETITIVE_MONITOR_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'analyze.yml',
              ref: 'main',
              inputs: {
                trigger_source: 'process',
                run_id: '${{ github.run_id }}',
                use_three_db: '${{ env.USE_THREE_DB }}',
                cascade: 'true'
              }
            });

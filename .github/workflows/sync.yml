name: 4. Sync & Deploy

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'What triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Previous workflow run ID'
        required: false
        type: string
      skip_thebrain:
        description: 'Skip TheBrain sync'
        required: false
        type: boolean
        default: false
      skip_alerts:
        description: 'Skip creating alerts'
        required: false
        type: boolean
        default: false

env:
  NODE_ENV: production

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: write
      pages: write
      id-token: write
      issues: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          cd github-actions-backend
          # Use npm install instead of npm ci to handle package-lock.json mismatches
          npm install --omit=dev
          
          # Install Python dependencies for TheBrain sync
          pip install requests
      
      # FIXED: Removed artifact download - use committed files instead
      - name: Ensure latest files
        run: |
          echo "✅ Using committed files from repository"
          ls -la api-data/*.json || true
          ls -la github-actions-backend/data/*.db || true
      
      # Run baseline analyzer to populate baseline_analysis table
      - name: Run baseline analysis for TheBrain
        if: ${{ !inputs.skip_thebrain }}
        run: |
          cd github-actions-backend
          
          # Check if we have the three-database architecture
          if [ -f "data/intelligence.db" ]; then
            echo "🧠 Running baseline analysis for three-database architecture..."
            node ai-analyzer-baseline-three-db.js || echo "Baseline analysis completed"
          else
            echo "⚠️  Three-database architecture not detected, skipping baseline analysis"
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Sync to TheBrain API
        if: ${{ !inputs.skip_thebrain }}
        run: |
          cd github-actions-backend
          
          # Check if credentials are available
          if [ -z "$THEBRAIN_API_KEY" ] || [ -z "$THEBRAIN_BRAIN_ID" ]; then
            echo "⚠️  TheBrain credentials not configured"
            echo "   Please add the following secrets to your repository:"
            echo "   - THEBRAIN_API_KEY"
            echo "   - THEBRAIN_BRAIN_ID"
            echo ""
            echo "   Go to: Settings → Secrets and variables → Actions → New repository secret"
            echo ""
            echo "   Skipping TheBrain sync..."
          else
            echo "🧠 Syncing to TheBrain via API..."
            python thebrain_api_sync.py || echo "TheBrain sync completed"
          fi
        env:
          THEBRAIN_API_KEY: ${{ secrets.THEBRAIN_API_KEY }}
          THEBRAIN_BRAIN_ID: ${{ secrets.THEBRAIN_BRAIN_ID }}
          GITHUB_ACTIONS: 'true'
      
      - name: Update workflow status
        run: |
          cd github-actions-backend
          echo "{
            \"last_run\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
            \"status\": \"success\",
            \"workflow_run_id\": \"${{ github.run_id }}\",
            \"trigger_source\": \"${{ inputs.trigger_source }}\",
            \"backend\": \"github-actions\"
          }" > ../api-data/workflow-status.json
      
      - name: Commit final updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add api-data/ || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Deploy updates - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
            git push
          fi
      
      # Deploy to GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      # Create alerts
      - name: Check for high-priority changes
        if: ${{ !inputs.skip_alerts }}
        id: check-changes
        run: |
          # Check if changes.json exists
          if [ ! -f "api-data/changes.json" ]; then
            echo "No changes.json file found"
            echo "high_priority_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count high priority changes
          HIGH_PRIORITY=$(jq '[.changes[] | select(.relevance_score >= 8)] | length' api-data/changes.json 2>/dev/null || echo "0")
          echo "high_priority_count=$HIGH_PRIORITY" >> $GITHUB_OUTPUT
          
          if [ "$HIGH_PRIORITY" -gt 0 ]; then
            echo "Found $HIGH_PRIORITY high-priority changes"
            # Create a simple summary without special characters that could break JavaScript
            jq -r '.changes[] | select(.relevance_score >= 8) | "- \(.company): Score \(.relevance_score)/10"' api-data/changes.json > /tmp/changes.txt || echo "No changes"
            
            # Save to file for next step
            echo "CHANGES_FILE=/tmp/changes.txt" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Issue for alerts
        if: ${{ !inputs.skip_alerts && steps.check-changes.outputs.high_priority_count > 0 }}
        uses: actions/github-script@v7
        with:
          script: |
            const count = ${{ steps.check-changes.outputs.high_priority_count }};
            // Read changes from environment variable to avoid escaping issues
            const changesDetails = process.env.CHANGES_DETAILS || 'See dashboard for details';
            
            const body = `# 🔴 High Priority Competitive Intelligence Alert
            
            **${count} high-priority changes detected** in competitor monitoring.
            
            ## Changes Detected:
            ${changesDetails}
            
            ## Dashboard:
            View the [full dashboard](${{ steps.deployment.outputs.page_url }}) for detailed analysis.
            
            ---
            *Automated alert from AI Competitive Intelligence Monitor*
            *Generated: ${new Date().toISOString()}*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 ${count} High Priority Alert${count > 1 ? 's' : ''}`,
              body: body,
              labels: ['competitive-intel', 'high-priority', 'automated']
            });
        env:
          CHANGES_DETAILS: ${{ steps.check-changes.outputs.CHANGES_FILE && format('{0}', steps.check-changes.outputs.CHANGES_FILE) || 'See dashboard for details' }}
      
      # SIMPLIFIED EMAIL NOTIFICATIONS - Use the existing check command
      - name: Send email notifications
        if: ${{ !inputs.skip_alerts }}
        run: |
          cd github-actions-backend
          
          # Check for email configuration
          if [ -z "$SMTP_HOST" ]; then
            echo "📧 Email not configured, skipping notifications"
            echo ""
            echo "To enable email notifications, add these secrets:"
            echo "  - SMTP_HOST (e.g., smtp.gmail.com)"
            echo "  - SMTP_PORT (e.g., 587)"
            echo "  - SMTP_USER (your email address)"
            echo "  - SMTP_PASS (app password)"
            echo "  - NOTIFICATION_EMAIL (recipient email)"
            echo ""
            echo "Go to: Settings → Secrets and variables → Actions"
          else
            echo "📧 Sending email notifications..."
            echo ""
            echo "Configuration:"
            echo "- Recipient: ${NOTIFICATION_EMAIL:-$SMTP_USER}"
            echo ""
            
            # Install nodemailer if not already installed
            npm list nodemailer || npm install nodemailer
            
            # Use the wrapper script which will use the three-db version
            node email-notifications-wrapper.js check || echo "Email notification completed"
          fi
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
          EMAIL_THRESHOLD: ${{ secrets.EMAIL_THRESHOLD }}

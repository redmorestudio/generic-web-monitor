name: 3. Analyze Content (PostgreSQL)

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'What triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Previous workflow run ID'
        required: false
        type: string
      analysis_mode:
        description: 'Analysis mode'
        required: false
        type: choice
        default: 'recent'
        options:
          - recent        # Last 24 hours only
          - full          # Analyze everything
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: true
  
  # Allow being called by other workflows
  workflow_call:
    inputs:
      trigger_source:
        description: 'What triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Previous workflow run ID'
        required: false
        type: string
      analysis_mode:
        description: 'Analysis mode'
        required: false
        type: string
        default: 'recent'
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: false  # Different default for when called by full-monitor
    outputs:
      run_id:
        description: 'The workflow run ID'
        value: ${{ jobs.analyze-content-postgres.outputs.run_id }}

# Prevent concurrent runs
concurrency:
  group: analyze-postgres-workflow
  cancel-in-progress: false

env:
  NODE_ENV: production

jobs:
  analyze-content-postgres:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    outputs:
      run_id: ${{ github.run_id }}
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          cd github-actions-backend
          npm install --omit=dev
      
      - name: Verify PostgreSQL connection
        run: |
          cd github-actions-backend
          echo "üêò Verifying PostgreSQL connection..."
          node -e "
            const { db, end } = require('./postgres-db');
            db.get('SELECT NOW() as time')
              .then(result => {
                console.log('‚úÖ PostgreSQL connected:', result.time);
                return end();
              })
              .catch(err => {
                console.error('‚ùå PostgreSQL connection failed:', err);
                process.exit(1);
              });
          "
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
      
      - name: Check PostgreSQL schema readiness
        run: |
          cd github-actions-backend
          echo "üîç Checking PostgreSQL schema..."
          node -e "
            const { db, end } = require('./postgres-db');
            
            async function checkSchema() {
              try {
                // Check intelligence schema tables
                const tables = await db.all(\`
                  SELECT table_name 
                  FROM information_schema.tables 
                  WHERE table_schema = 'intelligence'
                  ORDER BY table_name
                \`);
                
                console.log('‚úÖ Intelligence schema tables:', tables.map(t => t.table_name).join(', '));
                
                // Check for change_detection data
                const changeCount = await db.get(\`
                  SELECT COUNT(*) as count 
                  FROM processed_content.change_detection
                \`);
                
                console.log('üìä Changes available for analysis:', changeCount.count);
                
                await end();
              } catch (error) {
                console.error('‚ùå Schema check failed:', error);
                await end();
                process.exit(1);
              }
            }
            
            checkSchema();
          "
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
      
      - name: Run PostgreSQL AI analysis
        run: |
          cd github-actions-backend
          
          echo "üöÄ Running BASELINE AI Analysis with Groq Llama 3.3 (PostgreSQL)..."
          echo "üìä This will analyze ALL companies' current state"
          echo "‚ö° Using Groq for faster inference with Llama 3.3 70B"
          echo "üêò Using PostgreSQL for data storage"
          echo "‚è±Ô∏è Implemented with timeout protection and retry logic"
          
          # Run the enhanced analyzer with the correct mode parameter
          node ai-analyzer-ultra-three-db-postgres.js ${{ inputs.analysis_mode }}
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
          GITHUB_ACTIONS: 'true'
      
      - name: Generate static data files (PostgreSQL)
        run: |
          cd github-actions-backend
          echo "üìä Generating static data files from PostgreSQL..."
          
          # Check if the postgres version exists
          if [ -f "generate-static-data-three-db-postgres.js" ]; then
            node generate-static-data-three-db-postgres.js
          else
            echo "‚ö†Ô∏è PostgreSQL static data generator not found, using wrapper"
            node generate-static-data-wrapper.js
          fi
          
          echo "üìÅ Generated files:"
          ls -la ../api-data/
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
      
      - name: Create analysis summary
        run: |
          cd github-actions-backend
          echo "{
            \"workflow\": \"analyze-postgres\",
            \"run_id\": \"${{ github.run_id }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
            \"mode\": \"${{ inputs.analysis_mode }}\",
            \"trigger_source\": \"${{ inputs.trigger_source }}\",
            \"database\": \"postgresql\",
            \"ai_model\": \"groq-llama-3.3-70b\",
            \"status\": \"completed\"
          }" > ../api-data/last-analysis-postgres.json
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results-postgres-${{ github.run_id }}
          path: |
            github-actions-backend/data/enhanced-analysis-report-postgres.json
            api-data/
          retention-days: 30
      
      - name: Commit analysis results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Function to retry git push with exponential backoff
          push_with_retry() {
            local max_attempts=5
            local attempt=1
            local wait_time=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Attempt $attempt/$max_attempts to push changes..."
              
              # Pull latest changes before each attempt
              git pull origin main --rebase || {
                echo "‚ùå Failed to rebase, trying merge strategy..."
                git rebase --abort 2>/dev/null || true
                git pull origin main --no-rebase --strategy=ours || {
                  echo "‚ùå Merge failed, resetting to origin/main"
                  git reset --hard origin/main
                  return 1
                }
              }
              
              # Try to push
              if git push origin main; then
                echo "‚úÖ Successfully pushed changes!"
                return 0
              else
                echo "‚ùå Push failed"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${wait_time}s before retry..."
                  sleep $wait_time
                  wait_time=$((wait_time * 2))
                  attempt=$((attempt + 1))
                else
                  echo "‚ùå All push attempts failed"
                  return 1
                fi
              fi
            done
          }
          
          # Add all analysis outputs
          git add api-data/ || true
          git add github-actions-backend/data/*.json || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "üìù Changes to commit:"
            git diff --staged --name-only
            
            git commit -m "üöÄ Update PostgreSQL AI analysis - $(date -u +%Y-%m-%d_%H:%M:%S_UTC)"
            
            # Push changes with retry logic
            push_with_retry || {
              echo "‚ö†Ô∏è Failed to push changes after multiple attempts"
              echo "‚ö†Ô∏è This is likely due to concurrent workflows"
              echo "‚ö†Ô∏è Changes will be included in next workflow run"
              # Don't fail the workflow - changes are committed locally
              # and will be pushed in the next successful run
              exit 0
            }
          fi
      
      # Note: Cascade parameter for sync workflow would go here
      # But we need to create sync-postgres.yml first

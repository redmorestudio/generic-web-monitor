name: 3. Analyze Content (PostgreSQL)

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'What triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Previous workflow run ID'
        required: false
        type: string
      analysis_mode:
        description: 'Analysis mode'
        required: false
        type: choice
        default: 'all'
        options:
          - all           # Analyze everything
          - only-new      # Only unanalyzed content
          - force         # Force re-analyze all
          - changes-only  # Only analyze detected changes
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: true
  
  # Allow being called by other workflows
  workflow_call:
    inputs:
      trigger_source:
        description: 'What triggered this workflow'
        required: false
        type: string
        default: 'manual'
      run_id:
        description: 'Previous workflow run ID'
        required: false
        type: string
      analysis_mode:
        description: 'Analysis mode'
        required: false
        type: string
        default: 'all'
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: false  # Different default for when called by full-monitor

# Prevent concurrent runs
concurrency:
  group: analyze-postgres-workflow
  cancel-in-progress: false

env:
  NODE_ENV: production
  USE_POSTGRES: 'true'

jobs:
  analyze-content:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    outputs:
      run_id: ${{ github.run_id }}
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          cd github-actions-backend
          npm install --omit=dev
      
      - name: Validate PostgreSQL connection
        run: |
          cd github-actions-backend
          echo "üîå Testing PostgreSQL connection..."
          node -e "
            const { db, end } = require('./postgres-db');
            db.one('SELECT NOW() as current_time')
              .then(result => {
                console.log('‚úÖ PostgreSQL connection successful:', result.current_time);
                process.exit(0);
              })
              .catch(error => {
                console.error('‚ùå PostgreSQL connection failed:', error.message);
                process.exit(1);
              })
              .finally(() => end());
          "
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
      
      - name: Run baseline AI analysis (PostgreSQL)
        run: |
          cd github-actions-backend
          
          echo "üöÄ Running PostgreSQL baseline analysis with Groq Llama 3.3..."
          echo "   Mode: ${{ inputs.analysis_mode }}"
          echo "   Database: PostgreSQL"
          
          # Set analysis flags based on mode
          case "${{ inputs.analysis_mode }}" in
            "only-new")
              node ai-analyzer-baseline-three-db-postgres.js --only-new
              ;;
            "force")
              node ai-analyzer-baseline-three-db-postgres.js --force
              ;;
            "changes-only")
              echo "‚ö†Ô∏è  Changes-only mode not yet implemented"
              node ai-analyzer-baseline-three-db-postgres.js --only-new
              ;;
            *)
              node ai-analyzer-baseline-three-db-postgres.js
              ;;
          esac
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
          GITHUB_ACTIONS: 'true'
      
      - name: Run change detection analysis (PostgreSQL)
        if: ${{ inputs.analysis_mode != 'changes-only' }}
        run: |
          cd github-actions-backend
          
          echo "üîç Running PostgreSQL change detection and ultra-enhanced analysis with Groq..."
          node ai-analyzer-ultra-three-db-postgres.js full || echo "Change analysis completed"
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
          GITHUB_ACTIONS: 'true'
      
      - name: Generate static data files (PostgreSQL)
        run: |
          cd github-actions-backend
          echo "üìä Generating static data files from PostgreSQL..."
          node generate-static-data-three-db-postgres.js
          
          echo "üìÅ Generated files:"
          ls -la ../api-data/
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          
      - name: Generate change detail files (PostgreSQL)
        run: |
          cd github-actions-backend
          echo "üìù Generating change detail files from PostgreSQL..."
          
          # Check if PostgreSQL version of generate-change-details exists
          if [ -f "generate-change-details-postgres.js" ]; then
            node generate-change-details-postgres.js
          else
            echo "‚ö†Ô∏è  PostgreSQL version of change details generator not yet available"
            echo "   Using fallback approach"
          fi
          
          echo "üìÅ Generated change files:"
          ls -la ../api-data/changes/ | head -20 || echo "No changes directory yet"
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
      
      - name: Create analysis summary
        run: |
          cd github-actions-backend
          echo "{
            \"workflow\": \"analyze-postgres\",
            \"run_id\": \"${{ github.run_id }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
            \"mode\": \"${{ inputs.analysis_mode }}\",
            \"trigger_source\": \"${{ inputs.trigger_source }}\",
            \"database\": \"postgresql\",
            \"ai_model\": \"groq-llama-3.3-70b\",
            \"status\": \"completed\"
          }" > ../api-data/last-analysis-postgres.json
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results-postgres-${{ github.run_id }}
          path: |
            github-actions-backend/data/baseline-intelligence-report-postgres.json
            github-actions-backend/data/enhanced-analysis-report-postgres.json
            api-data/
          retention-days: 30
      
      - name: Commit analysis results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Function to retry git push with exponential backoff
          push_with_retry() {
            local max_attempts=5
            local attempt=1
            local wait_time=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Attempt $attempt/$max_attempts to push changes..."
              
              # Pull latest changes before each attempt
              git pull origin main --rebase || {
                echo "‚ùå Failed to rebase, trying merge strategy..."
                git rebase --abort 2>/dev/null || true
                git pull origin main --no-rebase --strategy=ours || {
                  echo "‚ùå Merge failed, resetting to origin/main"
                  git reset --hard origin/main
                  return 1
                }
              }
              
              # Try to push
              if git push origin main; then
                echo "‚úÖ Successfully pushed changes!"
                return 0
              else
                echo "‚ùå Push failed"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${wait_time}s before retry..."
                  sleep $wait_time
                  wait_time=$((wait_time * 2))
                  attempt=$((attempt + 1))
                else
                  echo "‚ùå All push attempts failed"
                  return 1
                fi
              fi
            done
          }
          
          # Add all analysis outputs
          git add api-data/ || true
          git add github-actions-backend/data/*.json || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "üìù Changes to commit:"
            git diff --staged --name-only
            
            git commit -m "üöÄ Update PostgreSQL AI analysis (Groq) - $(date -u +%Y-%m-%d_%H:%M:%S_UTC)"
            
            # Push changes with retry logic
            push_with_retry || {
              echo "‚ö†Ô∏è  Failed to push changes after multiple attempts"
              echo "‚ö†Ô∏è  This is likely due to concurrent workflows"
              echo "‚ö†Ô∏è  Changes will be included in next workflow run"
              # Don't fail the workflow - changes are committed locally
              # and will be pushed in the next successful run
              exit 0
            }
          fi
      
      - name: Trigger Sync workflow (if configured)
        if: inputs.cascade == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AI_COMPETITIVE_MONITOR_TOKEN }}
          script: |
            try {
              // Check if sync-postgres.yml exists
              const { data: files } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '.github/workflows'
              });
              
              const syncWorkflowExists = files.some(file => 
                file.name === 'sync-postgres.yml'
              );
              
              if (syncWorkflowExists) {
                const result = await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'sync-postgres.yml',
                  ref: 'main',
                  inputs: {
                    trigger_source: 'analyze-postgres-cascade',
                    run_id: '${{ github.run_id }}'
                  }
                });
                console.log(`‚úÖ Triggered PostgreSQL Sync workflow`);
              } else {
                console.log(`‚ö†Ô∏è  sync-postgres.yml not found - skipping cascade`);
                console.log(`   Create sync-postgres.yml or update full-monitor-postgres.yml`);
              }
            } catch (error) {
              console.log(`‚ö†Ô∏è  Could not trigger sync workflow:`, error.message);
              console.log(`   This is normal if sync-postgres.yml doesn't exist yet`);
            }

name: 2. Process Content (PostgreSQL)

on:
  workflow_dispatch:
    inputs:
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: true
  workflow_call:
    inputs:
      cascade:
        description: 'Trigger next workflow in chain'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  actions: write

concurrency:
  group: process-workflow
  cancel-in-progress: false

env:
  NODE_ENV: production

jobs:
  process-content:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          cd github-actions-backend
          npm install --omit=dev
      
      - name: Fix PostgreSQL Schema
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
        run: |
          cd github-actions-backend
          
          echo "üîß Ensuring PostgreSQL schema is correct..."
          node fix-postgres-schema-complete.js
      
      - name: Convert HTML to Markdown with PostgreSQL
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
        run: |
          cd github-actions-backend
          
          echo "üìù Converting HTML to Markdown using PostgreSQL..."
          node markdown-converter-three-db-postgres.js
      
      - name: Generate static data with PostgreSQL
        env:
          POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
        run: |
          cd github-actions-backend
          
          echo "üìä Generating static data files..."
          node generate-static-data-three-db-postgres.js
      
      - name: Commit static data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Function to push with enhanced retry and conflict resolution
          push_with_retry() {
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Push attempt $attempt/$max_attempts..."
              
              # First, try to push directly
              if git push origin main; then
                echo "‚úÖ Successfully pushed on attempt $attempt"
                return 0
              fi
              
              echo "‚ö†Ô∏è Push failed, attempting to resolve..."
              
              # Fetch latest changes
              git fetch origin main
              
              # Try different strategies based on the attempt
              if [ $attempt -eq 1 ]; then
                # First attempt: Try simple rebase
                echo "Trying rebase strategy..."
                if git rebase origin/main; then
                  if git push origin main; then
                    echo "‚úÖ Rebase strategy succeeded"
                    return 0
                  fi
                else
                  git rebase --abort 2>/dev/null || true
                fi
              elif [ $attempt -eq 2 ]; then
                # Second attempt: Merge with 'ours' strategy for api-data
                echo "Trying merge with 'ours' strategy for api-data..."
                git reset --mixed origin/main
                git add api-data/
                git commit -m "üîÑ Update static data from PostgreSQL - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
                if git push origin main; then
                  echo "‚úÖ Reset and recommit strategy succeeded"
                  return 0
                fi
              elif [ $attempt -eq 3 ]; then
                # Third attempt: Force merge preferring our api-data
                echo "Trying merge preferring our api-data changes..."
                git reset --hard HEAD
                git pull origin main --no-rebase --strategy=recursive --strategy-option=ours
                git add api-data/
                git commit --amend --no-edit
                if git push origin main; then
                  echo "‚úÖ Merge strategy succeeded"
                  return 0
                fi
              else
                # Final attempts: Stash, pull, reapply
                echo "Trying stash strategy..."
                git stash push -m "api-data changes"
                git reset --hard origin/main
                git stash pop || true
                git add api-data/
                git commit -m "üîÑ Update static data from PostgreSQL - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
                if git push origin main; then
                  echo "‚úÖ Stash strategy succeeded"
                  return 0
                fi
              fi
              
              # Exponential backoff
              if [ $attempt -lt $max_attempts ]; then
                local wait_time=$((2 ** attempt))
                echo "‚è≥ Waiting ${wait_time}s before retry..."
                sleep $wait_time
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "‚ùå All push attempts failed"
            return 1
          }
          
          # Add the generated static data
          git add api-data/ || {
            echo "‚ö†Ô∏è No api-data directory to add"
            exit 0
          }
          
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            git commit -m "üîÑ Update static data from PostgreSQL - $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
            
            if ! push_with_retry; then
              echo "‚ö†Ô∏è WARNING: Failed to push changes after multiple attempts"
              echo "This is non-critical - the sync-deploy stage will handle the final push"
              echo "Continuing workflow..."
              exit 0
            fi
          fi
      
      - name: Trigger Analyze workflow
        if: inputs.cascade == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'analyze-postgres.yml',
              ref: 'main',
              inputs: {
                cascade: 'true'
              }
            });
            console.log('‚úÖ Triggered Analyze workflow');
